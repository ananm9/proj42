************************************************************************************************************************************
Push Screen 
************************************************************************************************************************************
// Method 1:
Navigator.of(context).push(
	MaterialPageRoute(
	builder:(context){
		return WANTED_SCREEN_WIDGET;}
	));
	
// Method 2:
--> In MaterialApp
	MaterialApp(
	routes:{
		'/PATHNAME':(ctx)=> WANTED_SCREEN_WIDGET()
		},
	onGenerateRoute:(settings){return  MaterialPageRoute(builder:(context){return WANTED_SCREEN_WIDGET;});},
	onUnknowRoute:(settings){ MaterialPageRoute(builder:(context){return WANTED_SCREEN_WIDGET;});}
		
		
		
		)
		
// In Source Screen:
	Navigator.of(ctx).pushNamed(
	'/PATHNAME',
	arguments:{
		'KEY':VALUE
		});
		
// In Destenation Screen:
	final routeArgs=ModalRoute.of(context).settings.arguments as Map<String,String>;

************************************************************************************************************************************
Pop Screen 
************************************************************************************************************************************
// In Source Screen:
	Navigator.of(context).pop(RETURN_DATA);

// In Destenation Screen: (after pop screen will call then method)
	Navigator.of(context).pushNamed(
      MealDetailScreen.routeName,
      arguments: id,
    ).then((RETURNED_DATA) {
      if (RETURNED_DATA != null) {
        SOMEFUNCTION...;
      }
    });

************************************************************************************************************************************
TabBar 
************************************************************************************************************************************
// Method 1: (Top TabBar)

Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      // initialIndex: 0,
      child: Scaffold(
        appBar: AppBar(
          title: Text('Meals'),
          bottom: TabBar(
            tabs: <Widget>[
              Tab(
                icon: Icon(
                  Icons.category,
                ),
                text: 'Categories',
              ),
              Tab(
                icon: Icon(
                  Icons.star,
                ),
                text: 'Favorites',
              ),
            ],
          ),
        ),
        body: TabBarView(
          children: <Widget>[
            CategoriesScreen(),
            FavoritesScreen(),
          ],
        ),
      ),
    );
  }
  
  
// Method 2: (Bottom TabBar)
class _TabsScreenState extends State<TabsScreen> {
  final List<Map<String, Object>> _pages = [
    {
      'page': CategoriesScreen(),
      'title': 'Categories',
    },
    {
      'page': FavoritesScreen(),
      'title': 'Your Favorite',
    },
  ];
  int _selectedPageIndex = 0;

  void _selectPage(int index) {
    setState(() {
      _selectedPageIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_pages[_selectedPageIndex]['title']),
      ),
      body: _pages[_selectedPageIndex]['page'],
      bottomNavigationBar: BottomNavigationBar(
        onTap: _selectPage,
        backgroundColor: Theme.of(context).primaryColor,
        unselectedItemColor: Colors.white,
        selectedItemColor: Theme.of(context).accentColor,
        currentIndex: _selectedPageIndex,
        // type: BottomNavigationBarType.fixed,
        items: [
          BottomNavigationBarItem(
            backgroundColor: Theme.of(context).primaryColor,
            icon: Icon(Icons.category),
            title: Text('Categories'),
          ),
          BottomNavigationBarItem(
            backgroundColor: Theme.of(context).primaryColor,
            icon: Icon(Icons.star),
            title: Text('Favorites'),
          ),
        ],
      ),
    );
  }
}
